import { IDestroyable } from '../helpers/idestroyable';
import { ISubscription } from '../helpers/isubscription';
import { DeepPartial } from '../helpers/strict-type-checks';
import { ChartModel, ChartOptionsInternal } from '../model/chart-model';
import { DefaultPriceScaleId } from '../model/default-price-scale';
import { InvalidateMask } from '../model/invalidate-mask';
import { PaneInfo } from '../model/pane';
import { Point } from '../model/point';
import { Series } from '../model/series';
import { SeriesPlotRow } from '../model/series-data';
import { OriginalTime, TimePointIndex } from '../model/time-data';
import { PaneWidget } from './pane-widget';
import { TimeAxisWidget } from './time-axis-widget';
export interface MouseEventParamsImpl extends PaneInfo {
    time?: OriginalTime;
    index?: TimePointIndex;
    point?: Point;
    seriesData: Map<Series, SeriesPlotRow>;
    paneIndex?: number;
    hoveredSeries?: Series;
    hoveredObject?: string;
}
export declare type MouseEventParamsImplSupplier = () => MouseEventParamsImpl;
export declare class ChartWidget implements IDestroyable {
    private readonly _options;
    private _paneWidgets;
    private _paneSeparators;
    private readonly _model;
    private _drawRafId;
    private _height;
    private _width;
    private _leftPriceAxisWidth;
    private _rightPriceAxisWidth;
    private _element;
    private readonly _tableElement;
    private _timeAxisWidget;
    private _invalidateMask;
    private _drawPlanned;
    private _clicked;
    private _crosshairMoved;
    private _onWheelBound;
    constructor(container: HTMLElement, options: ChartOptionsInternal);
    model(): ChartModel;
    options(): Readonly<ChartOptionsInternal>;
    paneWidgets(): PaneWidget[];
    timeAxisWidget(): TimeAxisWidget;
    destroy(): void;
    resize(width: number, height: number, forceRepaint?: boolean): void;
    paint(invalidateMask?: InvalidateMask): void;
    applyOptions(options: DeepPartial<ChartOptionsInternal>): void;
    clicked(): ISubscription<MouseEventParamsImplSupplier>;
    crosshairMoved(): ISubscription<MouseEventParamsImplSupplier>;
    takeScreenshot(): HTMLCanvasElement;
    getPriceAxisWidth(position: DefaultPriceScaleId): number;
    adjustSize(): void;
    private _adjustSizeImpl;
    private _onMousewheel;
    private _drawImpl;
    private _applyTimeScaleInvalidations;
    private _applyMomentaryAutoScale;
    private _applyTimeScaleInvalidation;
    private _invalidateHandler;
    private _updateGui;
    private _destroySeparator;
    private _syncGuiWithModel;
    private _getMouseEventParamsImpl;
    private _onPaneWidgetClicked;
    private _onPaneWidgetCrosshairMoved;
    private _updateTimeAxisVisibility;
    private _isLeftAxisVisible;
    private _isRightAxisVisible;
}
